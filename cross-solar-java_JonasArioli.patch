From 3b130b218a7418bd68d6be608f7e3972cb61f3d7 Mon Sep 17 00:00:00 2001
From: Jonas Arioli <jonas.arioli82@gmail.com>
Date: Wed, 18 Jul 2018 23:16:30 -0300
Subject: [PATCH] My Submission
XOV: XO_0_0_1

---
 gradlew                                       |   0
 .../techtrial/controller/PanelController.java | 149 ++++++++-------
 .../techtrial/dto/DailyElectricity.java       |  72 --------
 .../techtrial/dto/DailyElectricityDTO.java    |  82 +++++++++
 .../exceptions/GlobalExceptionHandler.java    |   2 +-
 .../techtrial/model/DailyElectricity.java     | 116 ++++++++++++
 .../com/crossover/techtrial/model/Panel.java  |   3 +
 .../DailyElectricityRepository.java           |  18 ++
 .../HourlyElectricityRepository.java          |  14 +-
 .../techtrial/repository/PanelRepository.java |   8 +-
 .../scheduler/DailyElectricityAggregator.java |  72 ++++++++
 .../service/DailyElectricityService.java      |  18 ++
 .../service/DailyElectricityServiceImpl.java  |  59 ++++++
 .../service/HourlyElectricityService.java     |  19 +-
 .../service/HourlyElectricityServiceImpl.java |  46 +++--
 .../techtrial/service/PanelService.java       |  25 ++-
 .../techtrial/service/PanelServiceImpl.java   |  16 +-
 .../exception/ResourceNotFoundException.java  |  16 ++
 src/main/resources/application.properties     |   4 +-
 .../db/changelog/db.changelog-1.0.xml         |   0
 .../db/changelog/db.changelog-master.xml      |   0
 .../controller/PanelControllerTest.java       | 173 +++++++++++++-----
 .../service/DailyElectricityServiceTest.java  | 115 ++++++++++++
 23 files changed, 802 insertions(+), 225 deletions(-)
 mode change 100755 => 100644 gradlew
 delete mode 100644 src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
 create mode 100644 src/main/java/com/crossover/techtrial/dto/DailyElectricityDTO.java
 mode change 100755 => 100644 src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
 create mode 100644 src/main/java/com/crossover/techtrial/model/DailyElectricity.java
 create mode 100644 src/main/java/com/crossover/techtrial/repository/DailyElectricityRepository.java
 create mode 100644 src/main/java/com/crossover/techtrial/scheduler/DailyElectricityAggregator.java
 create mode 100644 src/main/java/com/crossover/techtrial/service/DailyElectricityService.java
 create mode 100644 src/main/java/com/crossover/techtrial/service/DailyElectricityServiceImpl.java
 create mode 100644 src/main/java/com/crossover/techtrial/service/exception/ResourceNotFoundException.java
 mode change 100755 => 100644 src/main/resources/db/changelog/db.changelog-1.0.xml
 mode change 100755 => 100644 src/main/resources/db/changelog/db.changelog-master.xml
 create mode 100644 src/test/java/com/crossover/techtrial/service/DailyElectricityServiceTest.java

diff --git a/gradlew b/gradlew
old mode 100755
new mode 100644
diff --git a/src/main/java/com/crossover/techtrial/controller/PanelController.java b/src/main/java/com/crossover/techtrial/controller/PanelController.java
index d308f18..b0a96dc 100644
--- a/src/main/java/com/crossover/techtrial/controller/PanelController.java
+++ b/src/main/java/com/crossover/techtrial/controller/PanelController.java
@@ -1,12 +1,7 @@
 package com.crossover.techtrial.controller;
 
-import com.crossover.techtrial.dto.DailyElectricity;
-import com.crossover.techtrial.model.HourlyElectricity;
-import com.crossover.techtrial.model.Panel;
-import com.crossover.techtrial.service.HourlyElectricityService;
-import com.crossover.techtrial.service.PanelService;
-import java.util.ArrayList;
 import java.util.List;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
@@ -18,8 +13,16 @@ import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RestController;
 
+import com.crossover.techtrial.dto.DailyElectricityDTO;
+import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.service.DailyElectricityService;
+import com.crossover.techtrial.service.HourlyElectricityService;
+import com.crossover.techtrial.service.PanelService;
+
 /**
  * Panel Controller for all Rest APIs related to Panel.
+ * 
  * @author Crossover
  *
  */
@@ -27,69 +30,73 @@ import org.springframework.web.bind.annotation.RestController;
 @RestController
 public class PanelController {
 
-  @Autowired
-  PanelService panelService;
-  
-  @Autowired
-  HourlyElectricityService hourlyElectricityService;
-  
-  /**
-   * Register a Panel to System and start receiving the electricity statistics.
-   * @param panel to register.
-   * @return
-   */
-  @PostMapping(path = "/api/register")
-  public ResponseEntity<?> registerPanel(@RequestBody Panel panel) {
-    panelService.register(panel);
-    return  ResponseEntity.accepted().build();
-  }
-  
-  /**
-   * Controller Method to save hourly Electricity to Database. 
-   * @param panelSerial Serial number of Panel.
-   * @param hourlyElectricity  generated electricity for this panel.
-   * @return
-   */
-  
-  @PostMapping(path = "/api/panels/{panel-serial}/hourly")
-  public ResponseEntity<?> saveHourlyElectricity(
-      @PathVariable(value = "panel-serial") String panelSerial, 
-      @RequestBody HourlyElectricity hourlyElectricity) {
-    return ResponseEntity.ok(hourlyElectricityService.save(hourlyElectricity));
-  }
-   
-  /**
-   * Get Hourly Electricity from Previous dates.
-   */
-  
-  @GetMapping(path = "/api/panels/{panel-serial}/hourly")
-  public ResponseEntity<?> hourlyElectricity(
-      @PathVariable(value = "banel-serial") String panelSerial,
-      @PageableDefault(size = 5,value = 0) Pageable pageable) {
-    Panel panel = panelService.findBySerial(panelSerial);
-    if (panel == null) {
-      return ResponseEntity.notFound().build(); 
-    }
-    Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(
-        panel.getId(), pageable);
-    return ResponseEntity.ok(page);
-  }
-  
-  /**
-   * This end point is used by Front end charts component to plot the daily statistics of 
-   * electricity generated by this Panel from the day it registered to end of previous day.
-   * @param panelSerial is unique serial for this Panel.
-   * @return
-   */
-  
-  @GetMapping(path = "/api/panels/{panel-serial}/daily")
-  public ResponseEntity<List<DailyElectricity>> allDailyElectricityFromYesterday(
-      @PathVariable(value = "panel-serial") String panelSerial) {
-    List<DailyElectricity> dailyElectricityForPanel = new ArrayList<>();
-    /**
-     * IMPLEMENT THE LOGIC HERE and FEEL FREE TO MODIFY OR ADD CODE TO RELATED CLASSES.
-     * MAKE SURE NOT TO CHANGE THE SIGNATURE OF ANY END POINT. NO PAGINATION IS NEEDED HERE.
-     */
-    return ResponseEntity.ok(dailyElectricityForPanel);
-  }
+	@Autowired
+	PanelService panelService;
+
+	@Autowired
+	HourlyElectricityService hourlyElectricityService;
+	
+	@Autowired
+	DailyElectricityService dailyElectricityService;
+
+	/**
+	 * Register a Panel to System and start receiving the electricity
+	 * statistics.
+	 * 
+	 * @param panel
+	 *            to register.
+	 * @return
+	 */
+	@PostMapping(path = "/api/register")
+	public ResponseEntity<Panel> registerPanel(@RequestBody Panel panel) {
+
+		return ResponseEntity.ok(panelService.register(panel));
+	}
+
+	/**
+	 * Controller Method to save hourly Electricity to Database.
+	 * 
+	 * @param panelSerial
+	 *            Serial number of Panel.
+	 * @param hourlyElectricity
+	 *            generated electricity for this panel.
+	 * @return
+	 */
+
+	@PostMapping(path = "/api/panels/{panel-serial}/hourly")
+	public ResponseEntity<?> saveHourlyElectricity(@PathVariable(value = "panel-serial") String panelSerial,
+			@RequestBody HourlyElectricity hourlyElectricity) {
+		return ResponseEntity.ok(hourlyElectricityService.save(hourlyElectricity, panelSerial));
+	}
+
+	/**
+	 * Get Hourly Electricity from Previous dates.
+	 */
+
+	@GetMapping(path = "/api/panels/{panel-serial}/hourly")
+	public ResponseEntity<?> hourlyElectricity(@PathVariable(value = "panel-serial") String panelSerial,
+			@PageableDefault(size = 5, value = 0) Pageable pageable) {
+		Page<HourlyElectricity> page;
+		page = hourlyElectricityService.getAllHourlyElectricityByPanelId(panelSerial, pageable);
+		return ResponseEntity.ok(page);
+		
+	}
+
+	/**
+	 * This end point is used by Front end charts component to plot the daily
+	 * statistics of electricity generated by this Panel from the day it
+	 * registered to end of previous day.
+	 * 
+	 * @param panelSerial
+	 *            is unique serial for this Panel.
+	 * @return
+	 */
+
+	@GetMapping(path = "/api/panels/{panel-serial}/daily")
+	public ResponseEntity<List<DailyElectricityDTO>> allDailyElectricityFromYesterday(
+			@PathVariable(value = "panel-serial") String panelSerial) {
+		List<DailyElectricityDTO> dailyElectricityForPanel = dailyElectricityService.getAllDailyElectricityByPanelSerial(panelSerial);
+		
+		return ResponseEntity.ok(dailyElectricityForPanel);
+	}
 }
\ No newline at end of file
diff --git a/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java b/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
deleted file mode 100644
index b0e0ea9..0000000
--- a/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
+++ /dev/null
@@ -1,72 +0,0 @@
-package com.crossover.techtrial.dto;
-
-import java.io.Serializable;
-import java.time.LocalDate;
-
-/**
- * DailyElectricity class will hold sum, average,minimum and maximum electricity for a given day.
- * @author Crossover
- *
- */
-
-public class DailyElectricity implements Serializable {
-  
-  private static final long serialVersionUID = 3605549122072628877L;
-
-  private LocalDate date;
-  
-  private Long sum;
-  
-  private Double average;
-  
-  private Long min;
-  
-  private Long max;
-
-  public LocalDate getDate() {
-    return date;
-  }
-
-  public void setDate(LocalDate date) {
-    this.date = date;
-  }
-
-  public Long getSum() {
-    return sum;
-  }
-
-  public void setSum(Long sum) {
-    this.sum = sum;
-  }
-
-  public Double getAverage() {
-    return average;
-  }
-
-  public void setAverage(Double average) {
-    this.average = average;
-  }
-
-  public Long getMin() {
-    return min;
-  }
-
-  public void setMin(Long min) {
-    this.min = min;
-  }
-
-  public Long getMax() {
-    return max;
-  }
-
-  public void setMax(Long max) {
-    this.max = max;
-  }
-
-  @Override
-  public String toString() {
-    return "DailyElectricity [date=" + date + ", sum=" + sum + ", average="
-        + average + ", min=" + min + ", max=" + max + "]";
-  }
-
-}
diff --git a/src/main/java/com/crossover/techtrial/dto/DailyElectricityDTO.java b/src/main/java/com/crossover/techtrial/dto/DailyElectricityDTO.java
new file mode 100644
index 0000000..a974223
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/dto/DailyElectricityDTO.java
@@ -0,0 +1,82 @@
+package com.crossover.techtrial.dto;
+
+import java.io.Serializable;
+import java.time.LocalDate;
+
+/**
+ * DailyElectricity Data Transfer Object class will hold sum, average,minimum and maximum electricity
+ * for a given day.
+ * 
+ * @author Crossover
+ *
+ */
+
+public class DailyElectricityDTO implements Serializable {
+
+	private static final long serialVersionUID = 3605549122072628877L;
+
+	private LocalDate date;
+
+	private Long sum;
+
+	private Double average;
+
+	private Long min;
+
+	private Long max;
+
+	public DailyElectricityDTO(LocalDate date, Long sum, Double average, Long min, Long max) {
+		this.date = date;
+		this.sum = sum;
+		this.average = average;
+		this.min = min;
+		this.max = max;
+	}
+
+	public LocalDate getDate() {
+		return date;
+	}
+
+	public void setDate(LocalDate date) {
+		this.date = date;
+	}
+
+	public Long getSum() {
+		return sum;
+	}
+
+	public void setSum(Long sum) {
+		this.sum = sum;
+	}
+
+	public Double getAverage() {
+		return average;
+	}
+
+	public void setAverage(Double average) {
+		this.average = average;
+	}
+
+	public Long getMin() {
+		return min;
+	}
+
+	public void setMin(Long min) {
+		this.min = min;
+	}
+
+	public Long getMax() {
+		return max;
+	}
+
+	public void setMax(Long max) {
+		this.max = max;
+	}
+
+	@Override
+	public String toString() {
+		return "DailyElectricity [date=" + date + ", sum=" + sum + ", average=" + average + ", min=" + min + ", max="
+				+ max + "]";
+	}
+
+}
diff --git a/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java b/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
old mode 100755
new mode 100644
index e39127a..a71ad58
--- a/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
+++ b/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
@@ -24,6 +24,6 @@ public class GlobalExceptionHandler {
     LOG.error("Exception: Unable to process this request. ", exception);
     AbstractMap.SimpleEntry<String, String> response =
         new AbstractMap.SimpleEntry<>("message", "Unable to process this request.");
-    return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
+    return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
   }
 }
diff --git a/src/main/java/com/crossover/techtrial/model/DailyElectricity.java b/src/main/java/com/crossover/techtrial/model/DailyElectricity.java
new file mode 100644
index 0000000..3869789
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/model/DailyElectricity.java
@@ -0,0 +1,116 @@
+package com.crossover.techtrial.model;
+
+import java.io.Serializable;
+import java.time.LocalDate;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.GenerationType;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.Table;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+
+/**
+ * DailyElectricity is responsible for electricity generated by a Panel in an hour.
+ * 
+ * @author Jonas Arioli
+ *
+ */
+
+
+@Entity
+@Table(name = "daily_electricity")
+public class DailyElectricity implements Serializable {
+
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = 1L;
+
+	
+	
+	@Id
+	@GeneratedValue(strategy = GenerationType.IDENTITY)
+	private Long id;
+
+	@JsonIgnore
+	@ManyToOne
+	@JoinColumn(name = "panel_id", referencedColumnName = "id")
+	Panel panel;
+
+	@Column(name = "daily_sum")
+	Long dailySum;
+
+	@Column(name = "daily_min")
+	Long dailyMin;
+
+	@Column(name = "daily_max")
+	Long dailyMax;
+
+	@Column(name = "daily_average")
+	Double dailyAverage;
+	
+	@Column(name = "date")
+	LocalDate date;
+	
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+	public Panel getPanel() {
+		return panel;
+	}
+
+	public void setPanel(Panel panel) {
+		this.panel = panel;
+	}
+
+	public Long getDailySum() {
+		return dailySum;
+	}
+
+	public void setDailySum(Long dailySum) {
+		this.dailySum = dailySum;
+	}
+
+	public Long getDailyMin() {
+		return dailyMin;
+	}
+
+	public void setDailyMin(Long dailyMin) {
+		this.dailyMin = dailyMin;
+	}
+
+	public Long getDailyMax() {
+		return dailyMax;
+	}
+
+	public void setDailyMax(Long dailyMax) {
+		this.dailyMax = dailyMax;
+	}
+
+	public Double getDailyAverage() {
+		return dailyAverage;
+	}
+
+	public void setDailyAverage(Double dailyAverage) {
+		this.dailyAverage = dailyAverage;
+	}
+	
+	public LocalDate getDate() {
+		return date;
+	}
+
+	public void setDate(LocalDate date) {
+		this.date = date;
+	}
+
+}
diff --git a/src/main/java/com/crossover/techtrial/model/Panel.java b/src/main/java/com/crossover/techtrial/model/Panel.java
index 34fb762..b551c84 100644
--- a/src/main/java/com/crossover/techtrial/model/Panel.java
+++ b/src/main/java/com/crossover/techtrial/model/Panel.java
@@ -10,6 +10,8 @@ import javax.persistence.Table;
 import javax.validation.constraints.NotNull;
 import org.springframework.lang.Nullable;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
+
 /**
  * Panel class hold information related to a Solar panel.
  * 
@@ -22,6 +24,7 @@ public class Panel implements Serializable {
 
   private static final long serialVersionUID = -8527695980909864257L;
 
+  @JsonIgnore
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   Long id;
diff --git a/src/main/java/com/crossover/techtrial/repository/DailyElectricityRepository.java b/src/main/java/com/crossover/techtrial/repository/DailyElectricityRepository.java
new file mode 100644
index 0000000..b2bc3ec
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/repository/DailyElectricityRepository.java
@@ -0,0 +1,18 @@
+package com.crossover.techtrial.repository;
+
+import java.util.List;
+
+import org.springframework.data.repository.CrudRepository;
+import org.springframework.data.rest.core.annotation.RestResource;
+
+import com.crossover.techtrial.model.DailyElectricity;
+
+/**
+ * DailyElectricity Repository is for all operations for DailyElectricity.
+ * @author Jonas Arioli
+ */
+
+@RestResource(exported = false)
+public interface DailyElectricityRepository extends CrudRepository<DailyElectricity, Long> {
+	List<DailyElectricity> findAllByPanelId(Long panelId);
+}
diff --git a/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java b/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
index b883493..49631b0 100644
--- a/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
+++ b/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
@@ -1,6 +1,11 @@
 package com.crossover.techtrial.repository;
 
 import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+
+import java.time.LocalDateTime;
+import java.util.List;
+
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.repository.PagingAndSortingRepository;
@@ -8,10 +13,13 @@ import org.springframework.data.rest.core.annotation.RestResource;
 
 /**
  * HourlyElectricity Repository is for all operations for HourlyElectricity.
+ * 
  * @author Crossover
  */
 @RestResource(exported = false)
-public interface HourlyElectricityRepository 
-    extends PagingAndSortingRepository<HourlyElectricity,Long> {
-  Page<HourlyElectricity> findAllByPanelIdOrderByReadingAtDesc(Long panelId,Pageable pageable);
+public interface HourlyElectricityRepository extends PagingAndSortingRepository<HourlyElectricity, Long> {
+	Page<HourlyElectricity> findAllByPanelIdOrderByReadingAtDesc(Long panelId, Pageable pageable);
+
+	List<HourlyElectricity> findByReadingAtBetweenAndPanel(LocalDateTime atStartOfDay, LocalDateTime atTime,
+			Panel panel);
 }
diff --git a/src/main/java/com/crossover/techtrial/repository/PanelRepository.java b/src/main/java/com/crossover/techtrial/repository/PanelRepository.java
index dcba8f3..fe9627b 100644
--- a/src/main/java/com/crossover/techtrial/repository/PanelRepository.java
+++ b/src/main/java/com/crossover/techtrial/repository/PanelRepository.java
@@ -1,8 +1,9 @@
 package com.crossover.techtrial.repository;
 
-import com.crossover.techtrial.model.Panel;
-import org.springframework.data.repository.PagingAndSortingRepository;
+import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.rest.core.annotation.RestResource;
+
+import com.crossover.techtrial.model.Panel;
 /**
  * PanelRepository allows all operations to Panel Entity.
  * @author Crossover
@@ -10,6 +11,7 @@ import org.springframework.data.rest.core.annotation.RestResource;
  */
 
 @RestResource(exported = false)
-public interface PanelRepository extends PagingAndSortingRepository<Panel, Long> {
+public interface PanelRepository extends JpaRepository<Panel, Long> {
+	
   Panel findBySerial(String serial);
 }
diff --git a/src/main/java/com/crossover/techtrial/scheduler/DailyElectricityAggregator.java b/src/main/java/com/crossover/techtrial/scheduler/DailyElectricityAggregator.java
new file mode 100644
index 0000000..859f4db
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/scheduler/DailyElectricityAggregator.java
@@ -0,0 +1,72 @@
+package com.crossover.techtrial.scheduler;
+
+import java.time.LocalDate;
+import java.util.List;
+import java.util.LongSummaryStatistics;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.scheduling.annotation.EnableScheduling;
+import org.springframework.scheduling.annotation.Scheduled;
+import org.springframework.stereotype.Component;
+
+import com.crossover.techtrial.model.DailyElectricity;
+import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.service.DailyElectricityService;
+import com.crossover.techtrial.service.HourlyElectricityService;
+import com.crossover.techtrial.service.PanelService;
+
+/**
+ * Scheduler to consolidate on daily bases all the electricity generated.s
+ *
+ * @author Jonas Arioli
+ */
+@Component
+@EnableScheduling
+@ConditionalOnProperty(value = "crosssolar.scheduler.enabled", havingValue = "true", matchIfMissing = true)
+public class DailyElectricityAggregator {
+
+    private static final String CRON = "0 0 0 * * *";
+    private static final String TIME_ZONE = "America/Sao_Paulo";
+    
+    @Autowired
+    HourlyElectricityService hourlyElectricityService;
+    
+    @Autowired
+    DailyElectricityService dailyElectricityService;
+    
+    @Autowired
+    PanelService panelService;
+
+    @Scheduled(cron = CRON, zone = TIME_ZONE)
+    public void consolidateDailyElectricityGeneration() {
+    	List<Panel> panels = this.panelService.getAll();
+    	
+    	LocalDate yesterday = LocalDate.now().minusDays(1);
+
+        for (Panel panel : panels) {
+            List<HourlyElectricity> hourlyElectricities = hourlyElectricityService
+                    .getAllHourlyElectricityByReadingAtBetween(yesterday, panel);
+
+            if (hourlyElectricities.isEmpty()) {
+                continue;
+            }
+
+            LongSummaryStatistics summaryStatistics = hourlyElectricities.stream()
+                    .mapToLong(HourlyElectricity::getGeneratedElectricity)
+                    .summaryStatistics();
+
+            DailyElectricity dailyElectricity = new DailyElectricity();
+            dailyElectricity.setPanel(panel);
+            dailyElectricity.setDailyAverage(summaryStatistics.getAverage());
+            dailyElectricity.setDailyMax(summaryStatistics.getMax());
+            dailyElectricity.setDailyMin(summaryStatistics.getMin());
+            dailyElectricity.setDailySum(summaryStatistics.getSum());
+            dailyElectricity.setDate(yesterday);
+            
+            
+            this.dailyElectricityService.save(dailyElectricity);
+        }
+    }
+}
diff --git a/src/main/java/com/crossover/techtrial/service/DailyElectricityService.java b/src/main/java/com/crossover/techtrial/service/DailyElectricityService.java
new file mode 100644
index 0000000..703b08c
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/service/DailyElectricityService.java
@@ -0,0 +1,18 @@
+package com.crossover.techtrial.service;
+
+import java.util.List;
+
+import com.crossover.techtrial.dto.DailyElectricityDTO;
+import com.crossover.techtrial.model.DailyElectricity;
+
+/**
+ * DailyElectricityService interface for all services realted to DailyElectricity.
+ * @author Jonas Arioli
+ *
+ */
+public interface DailyElectricityService {
+
+	DailyElectricity save(DailyElectricity dailyElectricity);
+
+    List<DailyElectricityDTO> getAllDailyElectricityByPanelSerial(String panelSerial);
+}
diff --git a/src/main/java/com/crossover/techtrial/service/DailyElectricityServiceImpl.java b/src/main/java/com/crossover/techtrial/service/DailyElectricityServiceImpl.java
new file mode 100644
index 0000000..7cd8873
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/service/DailyElectricityServiceImpl.java
@@ -0,0 +1,59 @@
+package com.crossover.techtrial.service;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.data.rest.webmvc.ResourceNotFoundException;
+import org.springframework.stereotype.Service;
+
+import com.crossover.techtrial.dto.DailyElectricityDTO;
+import com.crossover.techtrial.model.DailyElectricity;
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.repository.DailyElectricityRepository;
+
+/**
+ * DailyElectricityServiceImpl will handle daily summary electricity generated by a Panel.
+ *
+ * @author Jonas Arioli
+ *
+ */
+
+@Service
+public class DailyElectricityServiceImpl implements DailyElectricityService {
+	
+	@Autowired
+	DailyElectricityRepository dailyElectricityRepository;
+    
+	@Autowired
+	PanelService panelService;
+
+
+	@Override
+	public DailyElectricity save(DailyElectricity dailyElectricity) {
+		return dailyElectricityRepository.save(dailyElectricity);
+	}
+
+	@Override
+	public List<DailyElectricityDTO> getAllDailyElectricityByPanelSerial(String panelSerial) {
+		Panel panel = panelService.findBySerial(panelSerial);
+		if(panel == null)
+			throw new ResourceNotFoundException(String.format("The panel '%s' was not found", panelSerial));
+		
+		List<DailyElectricity> entities = dailyElectricityRepository.findAllByPanelId(panel.getId());
+
+        if (entities.isEmpty()) {
+            throw new ResourceNotFoundException("there is no daily electricity for panel serial: " + panelSerial);
+        }
+
+        return entities.stream()
+                .map(entity -> new DailyElectricityDTO(
+                                entity.getDate(),
+                                entity.getDailySum(),
+                                entity.getDailyAverage(),
+                                entity.getDailyMin(),
+                                entity.getDailyMax()))
+                .collect(Collectors.toList());
+	}
+
+}
diff --git a/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java b/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
index 70c40b7..e1c2a1c 100644
--- a/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
+++ b/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
@@ -1,16 +1,25 @@
 package com.crossover.techtrial.service;
 
-import com.crossover.techtrial.model.HourlyElectricity;
+import java.time.LocalDate;
+import java.util.List;
+
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 
+import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+
 /**
- * HourlyElectricityService interface for all services realted to HourlyElectricity.
+ * HourlyElectricityService interface for all services realted to
+ * HourlyElectricity.
+ * 
  * @author Crossover
  *
  */
 public interface HourlyElectricityService {
-  HourlyElectricity save(HourlyElectricity hourlyElectricity);
-  
-  Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable);
+	HourlyElectricity save(HourlyElectricity hourlyElectricity, String panelSerial);
+
+	Page<HourlyElectricity> getAllHourlyElectricityByPanelId(String panelSerial, Pageable pageable);
+
+	List<HourlyElectricity> getAllHourlyElectricityByReadingAtBetween(LocalDate date, Panel panel);
 }
diff --git a/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java b/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
index 6634e49..6a646ae 100644
--- a/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
+++ b/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
@@ -1,13 +1,19 @@
 package com.crossover.techtrial.service;
 
-import com.crossover.techtrial.model.HourlyElectricity;
-import com.crossover.techtrial.repository.HourlyElectricityRepository;
+import java.time.LocalDate;
+import java.time.LocalTime;
+import java.util.List;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.stereotype.Service;
 
+import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.repository.HourlyElectricityRepository;
+import com.crossover.techtrial.service.exception.ResourceNotFoundException;
+
 /**
  * HourlyElectricityServiceImpl will handle electricity generated by a Panel.
  *
@@ -17,15 +23,29 @@ import org.springframework.stereotype.Service;
 
 @Service
 public class HourlyElectricityServiceImpl implements HourlyElectricityService {
-  @Autowired
-  HourlyElectricityRepository hourlyElectricityRepository;
-  
-  public HourlyElectricity save(HourlyElectricity hourlyElectricity) {
-    return hourlyElectricityRepository.save(hourlyElectricity);
-  }
-  
-  public Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable) {
-    return hourlyElectricityRepository.findAllByPanelIdOrderByReadingAtDesc(panelId, pageable);
-  }
-  
+	
+	@Autowired
+	HourlyElectricityRepository hourlyElectricityRepository;
+	
+	@Autowired
+	PanelService panelService;
+	    
+	public HourlyElectricity save(HourlyElectricity hourlyElectricity, String panelSerial) {
+		Panel panel = panelService.findBySerial(panelSerial);
+		hourlyElectricity.setPanel(panel);
+		return hourlyElectricityRepository.save(hourlyElectricity);
+	}
+
+	public Page<HourlyElectricity> getAllHourlyElectricityByPanelId(String panelSerial, Pageable pageable) {
+		Panel panel = panelService.findBySerial(panelSerial);
+		if(panel == null)
+			throw new ResourceNotFoundException(String.format("There is no electricity for panel {}", panelSerial));
+		return hourlyElectricityRepository.findAllByPanelIdOrderByReadingAtDesc(panel.getId(), pageable);
+	}
+
+	@Override
+	public List<HourlyElectricity> getAllHourlyElectricityByReadingAtBetween(LocalDate date,Panel panel) {
+		return hourlyElectricityRepository.findByReadingAtBetweenAndPanel(date.atStartOfDay(), date.atTime(LocalTime.MAX), panel);
+	}
+
 }
\ No newline at end of file
diff --git a/src/main/java/com/crossover/techtrial/service/PanelService.java b/src/main/java/com/crossover/techtrial/service/PanelService.java
index b1ba940..a9dfe45 100644
--- a/src/main/java/com/crossover/techtrial/service/PanelService.java
+++ b/src/main/java/com/crossover/techtrial/service/PanelService.java
@@ -1,20 +1,27 @@
 package com.crossover.techtrial.service;
 
+import java.util.List;
+
 import com.crossover.techtrial.model.Panel;
 
 /**
  * PanelService interface for Panels.
+ * 
  * @author Crossover
  *
  */
 public interface PanelService {
-  
-  /**
-   * Register a panel for electricity monitoring.
-   * @param panel to register with system.
-   */
-  
-  void register(Panel panel);
-  
-  Panel findBySerial(String serial);
+
+	/**
+	 * Register a panel for electricity monitoring.
+	 * 
+	 * @param panel
+	 *            to register with system.
+	 */
+
+	Panel register(Panel panel);
+
+	Panel findBySerial(String serial);
+
+	List<Panel> getAll();
 }
diff --git a/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java b/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
index 48649de..5277b19 100644
--- a/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
+++ b/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
@@ -1,10 +1,13 @@
 package com.crossover.techtrial.service;
 
-import com.crossover.techtrial.model.Panel;
-import com.crossover.techtrial.repository.PanelRepository;
+import java.util.List;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.repository.PanelRepository;
+
 
 /**
  * PanelServiceImpl for panel related handling.
@@ -22,11 +25,16 @@ public class PanelServiceImpl implements PanelService {
    */
   
   @Override
-  public void register(Panel panel) { 
-    panelRepository.save(panel);
+  public Panel register(Panel panel) { 
+    return panelRepository.save(panel);
   }
   
   public Panel findBySerial(String serial) {
     return panelRepository.findBySerial(serial);
   }
+  
+  @Override
+  public List<Panel> getAll() {
+    return panelRepository.findAll();
+  }
 }
diff --git a/src/main/java/com/crossover/techtrial/service/exception/ResourceNotFoundException.java b/src/main/java/com/crossover/techtrial/service/exception/ResourceNotFoundException.java
new file mode 100644
index 0000000..b571510
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/service/exception/ResourceNotFoundException.java
@@ -0,0 +1,16 @@
+package com.crossover.techtrial.service.exception;
+
+/**
+ * Class that represents when there is no resource found
+ * @author Jonas Arioli
+ *
+ */
+public class ResourceNotFoundException extends RuntimeException  {
+
+	private static final long serialVersionUID = 1L;
+	
+	public ResourceNotFoundException(String exception) {
+		super(exception);
+	}
+
+}
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
index c7cc890..28f55af 100644
--- a/src/main/resources/application.properties
+++ b/src/main/resources/application.properties
@@ -1,8 +1,8 @@
 #PLEASE TRY NOT TO CHANGE SETTINGS AND USE APPROPRIATE ENV VARIABLES and DATABASE NAME AS CONFIGURED BELOW
 #Database connection Parameters
-spring.datasource.url: jdbc:mysql://localhost:3306/crosssolar?createDatabaseIfNotExist=true&useSSL=false
+spring.datasource.url: jdbc:mysql://127.0.0.1:3306/crosssolar?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
 spring.datasource.username=root
-spring.datasource.password=
+spring.datasource.password=root
 spring.datasource.driver-class-name=com.mysql.jdbc.Driver
 
 spring.jpa.hibernate.ddl-auto=none
diff --git a/src/main/resources/db/changelog/db.changelog-1.0.xml b/src/main/resources/db/changelog/db.changelog-1.0.xml
old mode 100755
new mode 100644
diff --git a/src/main/resources/db/changelog/db.changelog-master.xml b/src/main/resources/db/changelog/db.changelog-master.xml
old mode 100755
new mode 100644
diff --git a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
index a1deacf..9a940a7 100644
--- a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
+++ b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
@@ -1,61 +1,150 @@
 package com.crossover.techtrial.controller;
 
-import com.crossover.techtrial.model.Panel;
-import org.junit.Assert;
-import org.junit.Before;
+import static java.util.Collections.singletonList;
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.notNullValue;
+import static org.springframework.http.MediaType.APPLICATION_JSON;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Random;
+
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.Mock;
+import org.mockito.BDDMockito;
+import org.mockito.Mockito;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
-import org.springframework.boot.test.web.client.TestRestTemplate;
-import org.springframework.http.HttpEntity;
-import org.springframework.http.HttpHeaders;
-import org.springframework.http.MediaType;
-import org.springframework.http.ResponseEntity;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.boot.test.mock.mockito.MockBean;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.PageImpl;
+import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.servlet.MockMvc;
 
-import org.springframework.test.web.servlet.setup.MockMvcBuilders;
-
+import com.crossover.techtrial.dto.DailyElectricityDTO;
+import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.service.DailyElectricityService;
+import com.crossover.techtrial.service.HourlyElectricityService;
+import com.crossover.techtrial.service.PanelService;
+import com.fasterxml.jackson.databind.ObjectMapper;;
 
 /**
  * PanelControllerTest class will test all APIs in PanelController.java.
+ * 
  * @author Crossover
  *
  */
 
-@RunWith(SpringJUnit4ClassRunner.class)
+@RunWith(SpringRunner.class)
+@AutoConfigureMockMvc
 @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
 public class PanelControllerTest {
-  
-  MockMvc mockMvc;
-  
-  @Mock
-  private PanelController panelController;
-  
-  @Autowired
-  private TestRestTemplate template;
-
-  @Before
-  public void setup() throws Exception {
-    mockMvc = MockMvcBuilders.standaloneSetup(panelController).build();
-  }
-
-  @Test
-  public void testPanelShouldBeRegistered() throws Exception {
-    HttpEntity<Object> panel = getHttpEntity(
-        "{\"serial\": \"232323\", \"longitude\": \"54.123232\"," 
-            + " \"latitude\": \"54.123232\",\"brand\":\"tesla\" }");
-    ResponseEntity<Panel> response = template.postForEntity(
-        "/api/register", panel, Panel.class);
-    Assert.assertEquals(202,response.getStatusCode().value());
-  }
-
-  private HttpEntity<Object> getHttpEntity(Object body) {
-    HttpHeaders headers = new HttpHeaders();
-    headers.setContentType(MediaType.APPLICATION_JSON);
-    return new HttpEntity<Object>(body, headers);
-  }
+
+	private static final String SERIAL_ID = "232323";
+
+	private static Random random = new Random();
+
+	@Autowired
+	private MockMvc mockMvc;
+
+	@Autowired
+	private ObjectMapper objectMapper;
+
+	@MockBean
+	private DailyElectricityService dailyService;
+	
+	@MockBean
+	private HourlyElectricityService hourlyElectricityService;
+
+	@MockBean
+	private PanelService panelService;
+
+	private static Panel panel() {
+		Panel panel = new Panel();
+		panel.setBrand("Tesla");
+		panel.setLatitude(54.123232);
+		panel.setLongitude(54.123232);
+		panel.setSerial(SERIAL_ID);
+
+		return panel;
+	}
+
+	@Test
+	public void testPanelShouldBeRegistered() throws Exception {
+
+		Panel panel = panel();
+		BDDMockito.given(panelService.register(Mockito.any())).willReturn(panel);
+
+		this.mockMvc
+				.perform(post("/api/register").contentType(APPLICATION_JSON)
+						.content(objectMapper.writeValueAsString(panel)))
+				.andDo(print()).andExpect(status().isOk()).andExpect(jsonPath("$.brand", is(panel.getBrand())))
+				.andExpect(jsonPath("$.latitude", notNullValue())).andExpect(jsonPath("$.longitude", notNullValue()))
+				.andExpect(jsonPath("$.serial", is(panel.getSerial()))).andExpect(jsonPath("$.id").doesNotExist());
+	}
+	
+	private HourlyElectricity hourlyElectricity() {
+		HourlyElectricity hourlyElectricity = new HourlyElectricity();
+		hourlyElectricity.setId(random.nextLong());
+		hourlyElectricity.setGeneratedElectricity(random.nextLong());
+		hourlyElectricity.setPanel(panel());
+		hourlyElectricity.setReadingAt(LocalDateTime.now());
+		
+		return hourlyElectricity;
+	}
+
+	@Test
+	public void testSaveHourlyElectricity() throws Exception {
+		
+		BDDMockito.given(hourlyElectricityService.save(Mockito.any(), Mockito.any())).willReturn(hourlyElectricity());
+		
+
+		this.mockMvc
+				.perform(post("/api/panels/{panel-serial}/hourly", SERIAL_ID).contentType(APPLICATION_JSON)
+						.content(objectMapper.writeValueAsString(hourlyElectricity())))
+				.andDo(print()).andExpect(status().isOk()).andExpect(jsonPath("$.generatedElectricity", notNullValue()))
+				.andExpect(jsonPath("$.readingAt", notNullValue()));
+	}
+
+	@Test
+	public void testGetHourlyElectricity() throws Exception {
+		
+		List<HourlyElectricity> hourlyElectricityList = singletonList(hourlyElectricity());
+        Page<HourlyElectricity> page = new PageImpl<>(hourlyElectricityList);
+		
+		BDDMockito.given(hourlyElectricityService.getAllHourlyElectricityByPanelId(Mockito.any(), Mockito.any())).willReturn(page);
+		
+		this.mockMvc.perform(get("/api/panels/{panel-serial}/hourly", SERIAL_ID).contentType(APPLICATION_JSON))
+				.andDo(print()).andExpect(status().isOk())
+				.andExpect(jsonPath("$.content[0].generatedElectricity", notNullValue()))
+				.andExpect(jsonPath("$.content[0].readingAt", notNullValue()));
+	}
+
+	@Test
+	public void testGetAllDailyElectricityFromYesterday() throws Exception {
+		
+		DailyElectricityDTO dailyDTO = new DailyElectricityDTO(LocalDate.now(), random.nextLong(), random.nextDouble(), random.nextLong(), random.nextLong());
+		
+		List<DailyElectricityDTO> list = new ArrayList<DailyElectricityDTO>(Collections.singletonList(dailyDTO));
+		
+		BDDMockito.given(dailyService.getAllDailyElectricityByPanelSerial(SERIAL_ID)).willReturn(list);
+		
+		this.mockMvc.perform(get("/api/panels/{panel-serial}/daily", SERIAL_ID).contentType(APPLICATION_JSON))
+				.andDo(print()).andExpect(status().isOk()).andExpect(jsonPath("$[0].date", notNullValue()))
+				.andExpect(jsonPath("$[0].average", notNullValue())).andExpect(jsonPath("$[0].min", notNullValue()))
+				.andExpect(jsonPath("$[0].max", notNullValue())).andExpect(jsonPath("$[0].sum", notNullValue()));
+	}
+
+
 }
diff --git a/src/test/java/com/crossover/techtrial/service/DailyElectricityServiceTest.java b/src/test/java/com/crossover/techtrial/service/DailyElectricityServiceTest.java
new file mode 100644
index 0000000..548d69b
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/service/DailyElectricityServiceTest.java
@@ -0,0 +1,115 @@
+package com.crossover.techtrial.service;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.when;
+
+import java.time.LocalDate;
+import java.util.Collections;
+import java.util.List;
+import java.util.Random;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.BDDMockito;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.TestConfiguration;
+import org.springframework.boot.test.mock.mockito.MockBean;
+import org.springframework.context.annotation.Bean;
+import org.springframework.data.rest.webmvc.ResourceNotFoundException;
+import org.springframework.test.context.junit4.SpringRunner;
+
+import com.crossover.techtrial.dto.DailyElectricityDTO;
+import com.crossover.techtrial.model.DailyElectricity;
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.repository.DailyElectricityRepository;
+
+@RunWith(SpringRunner.class)
+public class DailyElectricityServiceTest {
+
+	@TestConfiguration
+    static class DailyElectricityServiceImplTestContextConfiguration {
+  
+        @Bean
+        public DailyElectricityService dailyElectricityService() {
+            return new DailyElectricityServiceImpl();
+        }        
+    }
+	
+	
+	@Autowired
+	DailyElectricityService dailyElectricityService;
+    
+	@MockBean
+	DailyElectricityRepository dailyElectricityRepository;
+    
+	@MockBean
+	PanelService panelService;
+	
+    private static Random random = new Random();
+
+    @Before
+    public void setUp() {
+        
+
+		BDDMockito.given(panelService.findBySerial(any())).willReturn(panel());
+    }
+    
+    private static Panel panel() {
+    	Panel panel = new Panel();
+		panel.setBrand("Tesla");
+		panel.setLatitude(54.123232);
+		panel.setLongitude(54.123232);
+		panel.setSerial("232323");
+		
+		return panel;
+    }
+    
+    private static DailyElectricity dailyElectricity() {
+    	
+    	DailyElectricity daily = new DailyElectricity();
+        daily.setPanel(panel());
+        daily.setDailyAverage(random.nextDouble());
+        daily.setDailyMax(random.nextLong());
+        daily.setDailyMin(random.nextLong());
+        daily.setDailySum(random.nextLong());
+        daily.setDate(LocalDate.now());
+        
+        return daily;
+        
+    }
+
+    @Test
+    public void save() {
+        DailyElectricity expected = dailyElectricity();
+        when(dailyElectricityRepository.save(any())).thenReturn(expected);
+
+        DailyElectricity result = dailyElectricityService.save(expected);
+
+        assertEquals(expected, result);
+    }
+
+    @Test
+    public void getAllDailyElectricityByPanelId() {
+        DailyElectricity dailyElectricity = dailyElectricity();
+        List<DailyElectricity> expected = Collections.singletonList(dailyElectricity);
+        when(dailyElectricityRepository.findAllByPanelId(any())).thenReturn(expected);
+
+        List<DailyElectricityDTO> result = dailyElectricityService.getAllDailyElectricityByPanelSerial("232323");
+
+        for (DailyElectricityDTO dto : result) {
+            assertEquals(dailyElectricity.getDailyAverage(), dto.getAverage());
+            assertEquals(dailyElectricity.getDailyMax(), dto.getMax());
+            assertEquals(dailyElectricity.getDailyMin(), dto.getMin());
+            assertEquals(dailyElectricity.getDailySum(), dto.getSum());
+            assertEquals(dailyElectricity.getDate(), dto.getDate());
+        }
+    }
+
+    @Test(expected = ResourceNotFoundException.class)
+    public void getAllDailyElectricityByPanelId_notFound() {
+        when(dailyElectricityRepository.findAllByPanelId(any())).thenReturn(Collections.emptyList());
+        dailyElectricityService.getAllDailyElectricityByPanelSerial("232323");
+    }
+}
-- 
2.17.1.windows.1

